#!/usr/bin/env node
const program = require('commander');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const shell = require('shelljs');
const shellInfo = require(path.resolve(__dirname, '../../json/shell.json'));

let packageInfo = { version: '您还没有安装 shell-ui 呢, 快来执行 npm i -g shell-ui 来安装体验吧' };
if (fs.existsSync(path.resolve(__dirname, '../../../shell-ui/package.json'))) {
  packageInfo = require(path.resolve(__dirname, '../../../shell-ui/package.json'));
}

// 检查是否有更新
let checkUpdate = null;
if (fs.existsSync(path.resolve(__dirname, '../../../shell-ui/utils/checkUpdate.js'))) {
  checkUpdate = require(path.resolve(__dirname, '../../../shell-ui/utils/checkUpdate.js'));
}

const command = shellInfo.shell[`'{{command}}'`];

const fileType = {
  shell: 'sh',
  javascript: 'js', // 不需要
  java: 'java',
  python: 'py',
  go: 'go'
}
const runStr = {
  shell: '', // 不需要
  javascript: '', // 不需要
  java: '', // 执行起来比较特殊需要编译, 特殊处理
  python: 'python',
  go: 'go run'
}

if (!command.enable) {
  // 如果没有启用脚本, 不做任何处理
  return
}

(async function() {
  // 检查是否已经安装了依赖
  if (!fs.existsSync(path.resolve(__dirname, '../../init.json'))) {
    fs.writeFileSync(path.resolve(__dirname, '../../init.json'), '{"init":false}');
  }
  const markInit = require(path.resolve(__dirname, '../../init.json'));
  if (!markInit.init || !fs.existsSync(path.resolve(__dirname, '../../node_modules'))) {
    console.log(chalk.red('系统检测到您还没有安装依赖, 即将为您安装依赖'));
    const result = await (function () {
      return new Promise(resolve => {
        shell.cd('../../');
        shell.exec('npm i --registry=https://registry.npm.taobao.org', null, function (code) {
          if (code !== 0) {
            // 失败了
            console.log(chalk.red('依赖安装失败, 请检查网络后重试,或手动运行如下命令手动安装依赖: '));
            console.log(chalk.red(`cd ${path.resolve(__dirname, '../../')} && npm i --registry=https://registry.npm.taobao.org`));
            resolve(1);
          } else {
            console.log(chalk.green('依赖安装成功~'));
            resolve(0)
          }
        })
      });
    })();
    if (result !== 0) { return }
  }

  if (checkUpdate) {
    // 检查更新
    const result = await checkUpdate();
    if (result.hasUpdate) {
      console.log(result.msg);
    }
  }

  // 如果有子命令, 注册子命令
  if (command.children && command.children.length) {
    command.children.forEach(item => {
      let temp = program;
      // 不存在指令的数据为脏数据, 不处理
      if (!item.command) return;
      // 没有启用的指令, 不做处理
      if (!item.enable) return;

      temp = temp.command(item.command);
      if (item.alias && item.alias !== item.command) {
        temp = temp.alias(item.alias);
      }
      if (item.description) {
        temp = temp.description(item.description);
      }
      temp.action((options, cmd) => {
        if (item.shell) {
          runShell(item, cmd.args, path.resolve(__dirname, '../userShell/`{{command}}`/' + item.command + `.${fileType[item.type]}`)); // 执行 shell 脚本或者 js 脚本
        } else {
          console.log('亲~ 你是不是忘记设置脚本内容了, 手动吃瓜')
        }
      })
    });
  }

// 注册主命令, 如果该命令存在 shell 脚本或者 javascript 脚本
  program.action(function(options, cmd) {
    if (command.shell) {
      if (cmd.args.length) {
        console.log(chalk.yellow(`参数 ${cmd.args.join(' ')} 未匹配到应用, 即将为您执行根指令!`))
      }
      runShell(command, cmd.args, path.resolve(__dirname, `../userShell/`{{command}}`.${fileType[command.type]}`)); // 执行 shell 脚本或者 js 脚本
    } else {
      console.log('亲~ 你是不是忘记设置脚本内容了, 手动吃瓜')
    }
  })
  program.parse(process.argv);

  if(!command.shell && (!program.args || !program.args.length)){
    program.help()
  }
})()

// 执行 js 命令
function runShell(item, args, shellPath) {
  // 如果脚本类型是 shell 脚本
  if (item.type === 'shell') {
    shell
      .chmod('777', shellPath)
      .exec('sh ' + shellPath + ' ' + args.join(' ').replace(/,/g, ' '), null, function (code) {
        if (code !== 0) {
          shell.echo('程序执行出错');
          shell.exit(1);
        }
      });
  } else if (item.type === 'javascript') {
    // 如果脚本类型是 javascript 类型的
    const selfFunction = new Function(item.shell.replace(/\\n/g, ''));
    selfFunction.call(null);
  } else if (item.type === 'java') {
    // todo 考虑复用编译结果, 避免每次运行都编译
    // 因为 java 需要编译, 同时要判断 java 的代码是否发生了变化, 这里需要引入 md5 进行处理
    const dirPath = shellPath.replace(/[^\/]+\.[^\/]+/g, '');
    let params = args.join(' ').replace(/,/g, ' ');
    if (!args.length) {
      const className = item.shell.match(/class [^\s]+/);
      if (className) {
        params = className[0].replace(/^class/, '');
      } else {
        // 根本没有写 java 代码, 报出错误
        console.log('额, 你是不是忘记写 java 代码了...');
        return
      }
    }
    shell
      .chmod('777', shellPath)
      .exec(`javac ${shellPath}`, null, function (code) {
        if (code !== 0) {
          shell.echo('程序执行出错');
          shell.exit(1);
        } else {
          // 执行文件
          shell.exec(`java -cp ${dirPath} ${params}`, null, function (code) {
              if (code !== 0) {
                shell.echo('程序执行出错');
                shell.exit(1);
              }
            });
        }
      });
  } else {
    // 如果脚本是 python 或者其他类型
    shell
      .chmod('777', shellPath)
      .exec(`${runStr[item.type]} ${shellPath} ${args.join(' ').replace(/,/g, ' ')}`, null, function (code) {
        if (code !== 0) {
          shell.echo('程序执行出错');
          shell.exit(1);
        }
      });
  }
}
